import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random
from Distance import distance
from matplotlib.pyplot import MultipleLocator
from matplotlib.legend_handler import HandlerPathCollection
import math
import cover

def Cov():
    print("###")

    #res1 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.8116533121216681, 0.81681723419041, 0.7993537695422771, 0.7946839742853666, 0.8003503884429255, 0.7910829469372547, 0.7926827805433935, 0.79654210391087, 0.789438954023694, 0.784523310954351, 0.789000249048792, 0.7852472195998647, 0.7841958442777061, 0.7866877430775179, 0.7849745523252283, 0.7834864410900788, 0.7828168805552793, 0.7821492104164719, 0.781591293703497, 0.7809876513807352, 0.7812817011237013, 0.7823129433995201, 0.7840201238199243, 0.7829575281726376, 0.7847231496767907, 0.7862487782628527, 0.7853290882078717, 0.7856100512580632, 0.7870070196658515, 0.7860123581092066, 0.7846746807727802, 0.7857717784066426, 0.7844505239337256, 0.7835729094268113, 0.7843830048286142]
    #res2 = [0.5651528558787429, 0.5056502026516453, 0.4754617321953267, 0.47503546029673765, 0.47549392965405884, 0.47284917093305734, 0.4800228917140171, 0.45905514689456006, 0.4521381158940908, 0.4548396206997238, 0.4418112910601475, 0.4364061656570503, 0.44017568669341217, 0.4340484521105723, 0.4290790464774955, 0.43301019372541005, 0.42696054179308673, 0.4265271950087882, 0.42813656539429096, 0.4278100743577091, 0.42584730959813755, 0.4249373366995981, 0.42457775419348975, 0.4234051026830902, 0.4225520698812031, 0.42371218113308745, 0.42569952423317625, 0.4272004076769698, 0.42762830020191517, 0.4294992611263186, 0.43012868964618495, 0.42979458761924766, 0.42946542901700524, 0.43037454283809323, 0.4286580809274456, 0.4273901163670446, 0.4274573397783531, 0.42532810581837444, 0.424360605682581, 0.4245974189320816]
    res1 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.8116533121216681, 0.8429328645982368, 0.8253735829437402, 0.8211715548578274, 0.8259338506190036, 0.8163355972083073, 0.8144087065097081, 0.8211997434699133, 0.8174707916436478, 0.8132014967290405, 0.8167490351158797, 0.8134998965080295, 0.8117860638508091, 0.8138365455659227, 0.8130460557986514, 0.8120729215866566, 0.8113897105475539, 0.8107619846441706, 0.8099000745849563, 0.8092170557373468, 0.809564191607877, 0.8107203725283324, 0.812194741968349, 0.810918965572423, 0.8121029407405655, 0.8133592884602854, 0.8128924867386093, 0.813082895973594, 0.8144493573052378, 0.8137163263382373, 0.8123291949817384, 0.8131962526023953, 0.8120373393454863, 0.8111610500240586, 0.8119126678671452]
    res2 = [0.5651528558787429, 0.580741911108058, 0.573410755095378, 0.5737500552149949, 0.5712751534723597, 0.5666340097110935, 0.5790159288176703, 0.5590929215221956, 0.5514455483554734, 0.5578021262642944, 0.5438211586540779, 0.5357240612203726, 0.5428878651962719, 0.5352964145165361, 0.5271310641202308, 0.5342348515712387, 0.528491213279282, 0.5255390524879212, 0.5293825401801391, 0.5287358687473238, 0.5249667653226535, 0.5240355029209568, 0.522813628967943, 0.5206235151584186, 0.5195519462841427, 0.519882066831456, 0.5210917677179884, 0.5239937996636814, 0.5237938812066235, 0.5254958879856175, 0.5277976151690884, 0.5271252845581865, 0.5261054452423262, 0.5284292450502577, 0.5273054649728343, 0.5253413609014808, 0.527073023667083, 0.5252967911484525, 0.5238377321951538, 0.5256685786985651]
    
    print(res1)
    print(res2)
    s1 = 0
    s2 = 0
    for i in range(len(res1)):
        s1 += res1[i]
        s2 += res2[i]
    a1 = s1 / 40.0
    a2 = s2 / 40.0
    print(a1, a2)
    print(a1 / a2)

    t = [i for i in range(1, 41)]
    #plt.title('Comparison of coverage under two strategies', fontsize = 'large')
    plt.xlabel('Time')
    plt.ylabel('Verification rate')
    
    plt.plot(t, res1, color = '#5170d7', linestyle = '-', marker = '^', linewidth = 1, markersize = 6.0, label = 'LVT-DCA')  #$\overline{T_{abn}}$
    plt.plot(t, res2, color = '#154406', linestyle = '-', marker = 'H', linewidth = 1, markersize = 6.0, label = 'UAV only collects')

    x_major_locator = MultipleLocator(8)
    y_major_locator = MultipleLocator(0.1)
    ax = plt.gca()
    ax.xaxis.set_major_locator(x_major_locator)
    ax.yaxis.set_major_locator(y_major_locator)
    
    plt.xlim(0, 40)
    plt.ylim(0.49, 0.85)
    plt.legend(loc=0, framealpha = 0.5, fontsize = 22) 
    #plt.savefig('Coverage.png')
    plt.show()
#Cov()

def Power():
    #cnt_data1 = [28911, 56018, 80863, 34066, 64565, 71695, 45430, 138001, 101218, 46899, 157077, 170065, 76509, 208013, 159509, 80221, 216098, 164971, 80282, 211155, 171754, 59805, 86495, 124565, 52333, 78679, 114071, 71914, 188142, 180851, 72134, 195534, 191934, 78872, 199206, 173087, 76215, 184108, 182546, 79952]
    cnt_data1 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.8116533121216681, 0.8429328645982368, 0.8253735829437402, 0.8211715548578274, 0.8259338506190036, 0.8163355972083073, 0.8144087065097081, 0.8211997434699133, 0.8174707916436478, 0.8132014967290405, 0.8167490351158797, 0.8134998965080295, 0.8117860638508091, 0.8138365455659227, 0.8130460557986514, 0.8120729215866566, 0.8113897105475539, 0.8107619846441706, 0.8099000745849563, 0.8092170557373468, 0.809564191607877, 0.8107203725283324, 0.812194741968349, 0.810918965572423, 0.8121029407405655, 0.8133592884602854, 0.8128924867386093, 0.813082895973594, 0.8144493573052378, 0.8137163263382373, 0.8123291949817384, 0.8131962526023953, 0.8120373393454863, 0.8111610500240586, 0.8119126678671452]
    #cnt_data1 = [56, 112, 171, 231, 293, 348, 341, 336, 327, 315, 307, 301, 300, 292, 286, 285, 285, 286, 285, 284, 284, 283, 278, 271, 267, 267, 268, 265, 265, 262, 263, 263, 261, 259, 256, 256, 259, 259, 258, 256]
    uva_cost1 = [118771.9785290998, 115192.63034532132, 98355.12504915283, 120389.86372833028, 140562.16180616262, 116414.71435618898, 114986.43462662614, 119911.09234846062, 101862.72320416756, 130884.98811649962, 140489.42769645576, 124016.78483583161, 120505.18606346379, 87110.84556980125, 95010.61046717223, 130841.57378776779, 145165.71498798742, 122810.12418771496, 115161.84139389455, 90365.34101319114, 95288.88539106082, 135016.2071804843, 135838.29468736902, 125288.585346676, 121047.00761749646, 92445.70874456018, 94877.67745853882, 132509.47392617931, 145990.62399917023, 119270.4007153126, 114667.88274026278, 93281.99956280677, 96788.34472723641, 132126.5794864386, 135492.98696981964, 121806.0385811642, 115602.271818605, 94590.66662662145, 98502.3032578125, 133942.25993754953]
    #uva_cost1 = [118471.82546858871, 117714.28860034118, 124643.37835985847, 128897.35893904034, 130156.43806793059, 130192.97645377844, 125495.35301726108, 120479.11687615846, 123271.82057989987, 116805.90508829031, 116749.07140796416, 125569.01430955475, 126010.75535485872, 118091.3858476685, 116904.94685228863, 117963.42032580716, 117198.57046892076, 117372.17638310924, 125297.03241563754, 119169.19698875157, 125908.45782736751, 118594.95863107561, 118450.06930093166, 118782.10525601958, 125721.1700967007, 125762.69698355379, 117659.55131349905, 118543.36580450744, 120619.6761697141, 118984.08986736607, 124879.5416603862, 118484.75750414227, 120594.90321949807, 118655.36384975599, 118593.7708945542, 122879.73834711236, 118162.06775647923, 119965.59535978966, 117587.37636652507, 123553.93130978355]

    #cnt_data2 = [28911, 49417, 63401, 25404, 46100, 51124, 32851, 96644, 69965, 31115, 105358, 116179, 51353, 143588, 109170, 53429, 142784, 114623, 52032, 147000, 115472, 39661, 60208, 84247, 34729, 55582, 78531, 48524, 133091, 124836, 45634, 135857, 129538, 50929, 134718, 119398, 47509, 122238, 123829, 51021]
    cnt_data2 = [0.5651528558787429, 0.580741911108058, 0.573410755095378, 0.5737500552149949, 0.5712751534723597, 0.5666340097110935, 0.5790159288176703, 0.5590929215221956, 0.5514455483554734, 0.5578021262642944, 0.5438211586540779, 0.5357240612203726, 0.5428878651962719, 0.5352964145165361, 0.5271310641202308, 0.5342348515712387, 0.528491213279282, 0.5255390524879212, 0.5293825401801391, 0.5287358687473238, 0.5249667653226535, 0.5240355029209568, 0.522813628967943, 0.5206235151584186, 0.5195519462841427, 0.519882066831456, 0.5210917677179884, 0.5239937996636814, 0.5237938812066235, 0.5254958879856175, 0.5277976151690884, 0.5271252845581865, 0.5261054452423262, 0.5284292450502577, 0.5273054649728343, 0.5253413609014808, 0.527073023667083, 0.5252967911484525, 0.5238377321951538, 0.5256685786985651]
    #cnt_data2 = [56, 51, 48, 48, 47, 50, 49, 49, 47, 46, 47, 46, 46, 45, 46, 46, 43, 43, 46, 45, 43, 44, 43, 44, 44, 44, 42, 44, 43, 42, 42, 42, 41, 42, 42, 41, 41, 42, 41, 41]
    uva_cost2 = [118771.82546858871, 117714.28860034118, 124643.37835985847, 128897.35893904034, 130156.43806793059, 130192.97645377844, 125495.35301726108, 120479.11687615846, 123271.82057989987, 116805.90508829031, 116749.07140796416, 125569.01430955475, 126010.75535485872, 118091.3858476685, 116904.94685228863, 117963.42032580716, 117198.57046892076, 117372.17638310924, 125297.03241563754, 119169.19698875157, 125908.45782736751, 118594.95863107561, 118450.06930093166, 118782.10525601958, 125721.1700967007, 125762.69698355379, 117659.55131349905, 118543.36580450744, 120619.6761697141, 118984.08986736607, 124879.5416603862, 118484.75750414227, 120594.90321949807, 118655.36384975599, 118593.7708945542, 122879.73834711236, 118162.06775647923, 119965.59535978966, 117587.37636652507, 123553.93130978355]

    u1 = []
    u2 = []
    sum1 = 0.
    sum2 = 0.
    d1 = 0.
    d2 = 0.
    for i in range(len(cnt_data1)):
        #u1.append(cnt_data1[i] / 10000)
        #u2.append(cnt_data2[i] / 10000)
        #u1.append(cnt_data1[i] / 1000 / (uva_cost1[i] / 35000 * 100))
        #u2.append(cnt_data2[i] / 1000 / (uva_cost2[i] / 35000 * 100))

        u1.append( (uva_cost1[i] / 35000 * 100) / (cnt_data1[i] * 1000))
        u2.append(( uva_cost2[i] / 35000 * 100) / (cnt_data2[i] * 1000))

        '''
        sum1 += (uva_cost1[i] / 35000 * 100)
        sum2 += (uva_cost2[i] / 35000 * 100)
        d1 += (cnt_data1[i] / 1000)
        d2 += (cnt_data2[i] / 1000)
        u1.append(d1 / sum1)
        u2.append(d2 / sum2)
        '''
       # u1.append(cnt_data1[i] * 100  / (uva_cost1[i] / 35000 * 100))
       # u2.append(cnt_data2[i] * 100  / (uva_cost2[i] / 35000 * 100))
    print(min(u1))
    print(max(u1))
    s1 = 0
    s2 = 0
    for i in range(len(u1)):
        s1 += u1[i]
        s2 += u2[i]
    a1 = s1 / 40.0
    a2 = s2 / 40.0
    print(str(a1) + '######')
    print(str(a2) + "######")
    print(1 - (a1 / a2)) # %56.4

    t = [i for i in range(1, 41)]
    plt.xlabel('Time')
    plt.ylabel('UAV utility(×${10}^{4}$)')
    
    print(u1)
    print(u2)

    plt.plot(t, u1, color = '#5170d7', linestyle = '-', marker = '^', linewidth = 1, markersize = 6.0, label = 'LVT-DCA')  #$\overline{T_{abn}}$
    plt.plot(t, u2, color = '#154406', linestyle = '-', marker = 'H', linewidth = 1, markersize = 6.0, label = 'UAV only collects')

    x_major_locator = MultipleLocator(8)
    y_major_locator = MultipleLocator(0.2)
    ax = plt.gca()
    ax.xaxis.set_major_locator(x_major_locator)
    ax.yaxis.set_major_locator(y_major_locator)
    
    plt.xlim(0, 40)
    plt.ylim(0, 1)
    plt.legend(loc = 0, framealpha = 0.5, fontsize = 'xx-large') 
    plt.show()
Power()

def UVA_cost():
    #uc1 = [118771.9785290998, 115192.63034532132, 98355.12504915283, 120389.86372833028, 140562.16180616262, 116414.71435618898, 114986.43462662614, 119911.09234846062, 101862.72320416756, 130884.98811649962, 140489.42769645576, 124016.78483583161, 120505.18606346379, 87110.84556980125, 95010.61046717223, 130841.57378776779, 145165.71498798742, 122810.12418771496, 115161.84139389455, 90365.34101319114, 95288.88539106082, 135016.2071804843, 135838.29468736902, 125288.585346676, 121047.00761749646, 92445.70874456018, 94877.67745853882, 132509.47392617931, 145990.62399917023, 119270.4007153126, 114667.88274026278, 93281.99956280677, 96788.34472723641, 132126.5794864386, 135492.98696981964, 121806.0385811642, 115602.271818605, 94590.66662662145, 98502.3032578125, 133942.25993754953]
    #uc2 = [118471.82546858871, 117714.28860034118, 124643.37835985847, 128897.35893904034, 130156.43806793059, 130192.97645377844, 125495.35301726108, 120479.11687615846, 123271.82057989987, 116805.90508829031, 116749.07140796416, 125569.01430955475, 126010.75535485872, 118091.3858476685, 116904.94685228863, 117963.42032580716, 117198.57046892076, 117372.17638310924, 125297.03241563754, 119169.19698875157, 125908.45782736751, 118594.95863107561, 118450.06930093166, 118782.10525601958, 125721.1700967007, 125762.69698355379, 117659.55131349905, 118543.36580450744, 120619.6761697141, 118984.08986736607, 124879.5416603862, 118484.75750414227, 120594.90321949807, 118655.36384975599, 118593.7708945542, 122879.73834711236, 118162.06775647923, 119965.59535978966, 117587.37636652507, 123553.93130978355]
    a1 = [28911, 56018, 80863, 34066, 64565, 71695, 45430, 138001, 101218, 46899, 157077, 170065, 76509, 208013, 159509, 80221, 216098, 164971, 80282, 211155, 171754, 59805, 86495, 124565, 52333, 78679, 114071, 71914, 188142, 180851, 72134, 195534, 191934, 78872, 199206, 173087, 76215, 184108, 182546, 79952]
    a2 = [28911, 49417, 63401, 25404, 46100, 51124, 32851, 96644, 69965, 31115, 105358, 116179, 51353, 143588, 109170, 53429, 142784, 114623, 52032, 147000, 115472, 39661, 60208, 84247, 34729, 55582, 78531, 48524, 133091, 124836, 45634, 135857, 129538, 50929, 134718, 119398, 47509, 122238, 123829, 51021]
    b1 = [118771.9785290998, 115192.63034532132, 98355.12504915283, 120389.86372833028, 140562.16180616262, 116414.71435618898, 114986.43462662614, 119911.09234846062, 101862.72320416756, 130884.98811649962, 140489.42769645576, 124016.78483583161, 120505.18606346379, 87110.84556980125, 95010.61046717223, 130841.57378776779, 145165.71498798742, 122810.12418771496, 115161.84139389455, 90365.34101319114, 95288.88539106082, 135016.2071804843, 135838.29468736902, 125288.585346676, 121047.00761749646, 92445.70874456018, 94877.67745853882, 132509.47392617931, 145990.62399917023, 119270.4007153126, 114667.88274026278, 93281.99956280677, 96788.34472723641, 132126.5794864386, 135492.98696981964, 121806.0385811642, 115602.271818605, 94590.66662662145, 98502.3032578125, 133942.25993754953]
    b2 = [118771.82546858871, 117714.28860034118, 124643.37835985847, 128897.35893904034, 130156.43806793059, 130192.97645377844, 125495.35301726108, 120479.11687615846, 123271.82057989987, 116805.90508829031, 116749.07140796416, 125569.01430955475, 126010.75535485872, 118091.3858476685, 116904.94685228863, 117963.42032580716, 117198.57046892076, 117372.17638310924, 125297.03241563754, 119169.19698875157, 125908.45782736751, 118594.95863107561, 118450.06930093166, 118782.10525601958, 125721.1700967007, 125762.69698355379, 117659.55131349905, 118543.36580450744, 120619.6761697141, 118984.08986736607, 124879.5416603862, 118484.75750414227, 120594.90321949807, 118655.36384975599, 118593.7708945542, 122879.73834711236, 118162.06775647923, 119965.59535978966, 117587.37636652507, 123553.93130978355]

    u1 = []
    u2 = []
    s1 = 0
    s2 = 0
    c1 = 0
    c2 = 0
    r1 = 0
    r2 = 0
    for i in range(len(a1)):
        s1 += a1[i] # num
        s2 += a2[i]
        c1 += b1[i] / 35000 * 100 # cost
        c2 += b2[i] / 35000 * 100
        r1 = c1 / s1
        r2 = c2 / s2
        u1.append(r1 * 100)
        u2.append(r2 * 100)

    print(min(u1))
    print(max(u1))
    print(u1)
    print(u2)
    t = [i for i in range(1, 41)]
    plt.xlabel('Time')
    plt.ylabel('UAV cost(k)')
    
    plt.plot(t, u1, color = '#5170d7', linestyle = '-', marker = '^', linewidth = 1, markersize = 6.0, label = 'LVT-DCA')  #$\overline{T_{abn}}$
    plt.plot(t, u2, color = '#154406', linestyle = '-', marker = 'H', linewidth = 1, markersize = 6.0, label = 'UAV only collects')

    x_major_locator = MultipleLocator(8)
    y_major_locator = MultipleLocator(0.2)
    ax = plt.gca()
    ax.xaxis.set_major_locator(x_major_locator)
    ax.yaxis.set_major_locator(y_major_locator)
    
    plt.xlim(0, 40)
    plt.ylim(0., 1.2)
    plt.legend(loc = 0, framealpha = 0.5, fontsize = 'xx-large') 
    plt.show()
#UVA_cost()



def diff_cyc():
    d1 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7377298277148994, 0.7362525989920364, 0.7440379348403712, 0.7315584674061828, 0.7259910776871912, 0.7330043256059598, 0.7208698178520851, 0.7176065822260268, 0.7226470748893866, 0.7142764580306782, 0.7089374303111193, 0.7145756885191387, 0.7105449483297406, 0.7089318792966173, 0.712498629184035, 0.7109421236698262, 0.7091437051611335, 0.7085274317425325, 0.7072894323223837, 0.7059267191288008, 0.7049150978531478, 0.7055150676862639, 0.7072449165532247, 0.7091143374744875, 0.7075447908097464, 0.7096118190480536, 0.711556330227406, 0.7108564981662748, 0.7105392193498675, 0.7123164897309989, 0.710826255585808, 0.709290875127485, 0.7108199628021361, 0.7092201806858927, 0.7079217531291025, 0.709182773918244]
    d2 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.7785428445948643, 0.7852293940508795, 0.7694082381182549, 0.7656084773968647, 0.7727660742293768, 0.7615036159898275, 0.7583714552106563, 0.7625316363503942, 0.7550462423014752, 0.7510718881420783, 0.756019998761954, 0.7516672304034168, 0.7500534459029238, 0.7531717081308495, 0.7520981343056944, 0.7503714737937466, 0.7496206593827818, 0.7486557175292854, 0.7473768583945347, 0.7470095465383995, 0.7475299561900947, 0.7488848497284286, 0.7505582581672694, 0.7489555171100348, 0.7514759988449791, 0.7534518146869095, 0.7524639091856509, 0.7523463848103329, 0.7540159098655167, 0.7526255175965759, 0.7509630380628518, 0.7521891285495023, 0.7506390837233662, 0.7494802749214383, 0.7505789689879994]
    d3 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.8116533121216681, 0.81681723419041, 0.7993537695422771, 0.7946839742853666, 0.8003503884429255, 0.7910829469372547, 0.7926827805433935, 0.79654210391087, 0.789438954023694, 0.784523310954351, 0.789000249048792, 0.7852472195998647, 0.7841958442777061, 0.7866877430775179, 0.7849745523252283, 0.7834864410900788, 0.7828168805552793, 0.7821492104164719, 0.781591293703497, 0.7809876513807352, 0.7812817011237013, 0.7823129433995201, 0.7840201238199243, 0.7829575281726376, 0.7847231496767907, 0.7862487782628527, 0.7853290882078717, 0.7856100512580632, 0.7870070196658515, 0.7860123581092066, 0.7846746807727802, 0.7857717784066426, 0.7844505239337256, 0.7835729094268113, 0.7843830048286142]
    d4 = [0.5651528558787429, 0.6145325273064505, 0.6886689053682198, 0.7405189718722546, 0.7817303151705333, 0.8116533121216681, 0.8429328645982368, 0.8253735829437402, 0.8211715548578274, 0.8259338506190036, 0.8163355972083073, 0.8144087065097081, 0.8211997434699133, 0.8174707916436478, 0.8132014967290405, 0.8167490351158797, 0.8134998965080295, 0.8117860638508091, 0.8138365455659227, 0.8130460557986514, 0.8120729215866566, 0.8113897105475539, 0.8107619846441706, 0.8099000745849563, 0.8092170557373468, 0.809564191607877, 0.8107203725283324, 0.812194741968349, 0.810918965572423, 0.8121029407405655, 0.8133592884602854, 0.8128924867386093, 0.813082895973594, 0.8144493573052378, 0.8137163263382373, 0.8123291949817384, 0.8131962526023953, 0.8120373393454863, 0.8111610500240586, 0.8119126678671452] 

    t = [i for i in range(1, 41)]
    plt.plot(t, d1, color = 'limegreen', linestyle = '-', marker = 'H', linewidth = 1, markersize = 5, label = '${Vt}$= 4')
    plt.plot(t, d2, color = 'dodgerblue', linestyle = '-', marker = '^', linewidth = 1, markersize = 5, label = '${Vt}$= 5')
    plt.plot(t, d3, color = 'k', linestyle = '-', marker = 'o', linewidth = 1, markersize = 5, label = '${Vt}$= 6')
    plt.plot(t, d4, color = 'darkviolet', linestyle = '-', marker = 'v', linewidth = 1, markersize = 5, label = '${Vt}$= 7')

    plt.xlabel('Time')
    plt.ylabel('Verification rate')

    x_major_locator = MultipleLocator(8)
    y_major_locator = MultipleLocator(0.15)
    ax = plt.gca()
    ax.xaxis.set_major_locator(x_major_locator)
    ax.yaxis.set_major_locator(y_major_locator)
    plt.xlim(0, 40)
    plt.ylim(0.55, 0.85)
    
    plt.legend(loc = 0, framealpha = 0.5, fontsize = 15)#'xx-large') 
    plt.show()
#diff_cyc()